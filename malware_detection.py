import os
import hashlib
import tkinter as tk
from tkinter import filedialog, messagebox
import requests
import json

# import pefile
# import psutil

# Your VirusTotal API key
API_KEY = "ee5c4ae8de1821d2d7fcbc47bf6323028e79d0249c952f6711e35207ddad6534"


# Function to calculate the MD5 hash of a file
def calculate_hash(file_path):
    """Calculate MD5 hash of a file."""
    hasher = hashlib.md5()
    with open(file_path, "rb") as file:
        buffer = file.read()
        hasher.update(buffer)
    return hasher.hexdigest()


# Function to check a URL for malware using VirusTotal API
def check_url_for_malware(url):
    """Check a URL for malware using VirusTotal API."""
    try:
        params = {"apikey": API_KEY, "resource": url}
        headers = {
            "Accept-Encoding": "gzip, deflate",
            "User-Agent": "gzip, My Python requests library example client or username",
        }
        response = requests.get(
            "https://www.virustotal.com/vtapi/v2/url/report",
            params=params,
            headers=headers,
        )
        result = response.json()
        print("url result: ", json.dumps(result, indent=4))

        if result["response_code"] == 1:
            if result["positives"] > 0:
                return f"URL is malicious! Detected by {result['positives']} out of {result['total']} scanners."
            else:
                return "URL is not malicious."
        else:
            return "Error: URL not found in VirusTotal database or API request limit exceeded."

    except Exception as e:
        return f"Error: {str(e)}"


# Function to check a file hash for malware using VirusTotal API
def check_hash_for_malware(hash_value):
    """Check a file hash for malware using VirusTotal API."""
    try:
        params = {"apikey": API_KEY, "resource": hash_value}
        headers = {
            "Accept-Encoding": "gzip, deflate",
            "User-Agent": "gzip, My Python requests library example client or username",
        }
        response = requests.get(
            "https://www.virustotal.com/vtapi/v2/file/report",
            params=params,
            headers=headers,
        )
        result = response.json()
        print("hash result: ", json.dumps(result, indent=4))

        if result["response_code"] == 1:
            if result["positives"] > 0:
                return f"Hash is malicious! Detected by {result['positives']} out of {result['total']} scanners."
            else:
                return "Hash is not malicious."
        else:
            return "Error: Hash not found in VirusTotal database or API request limit exceeded."

    except Exception as e:
        return f"Error: {str(e)}"


# Function to upload and scan a file for malware using VirusTotal API
def scan_file_for_malware(file_path):
    """Upload and scan a file for malware using VirusTotal API."""
    try:
        url = "https://www.virustotal.com/vtapi/v2/file/scan"
        params = {"apikey": API_KEY}
        files = {"file": (os.path.basename(file_path), open(file_path, "rb"))}
        response = requests.post(url, files=files, params=params)
        result = response.json()
        resource = result["resource"]
        file_report(resource)
        # print("file result: ", json.dumps(result, indent=4))

        if result["response_code"] == 1:
            resource = result["resource"]
            return f"File uploaded successfully. VirusTotal analysis URL: https://www.virustotal.com/gui/file/{resource}/detection"
        else:
            return "Error: File upload failed."

    except Exception as e:
        return f"Error: {str(e)}"


def file_report(resource):
    """Get file scan report from VirusTotal API."""
    try:
        print("in the file report function")
        report = "https://www.virustotal.com/vtapi/v2/file/report"
        params = {"apikey": API_KEY, "resource": resource}
        response = requests.get(report, params=params)
        report_json = response.json()
        print("file report: ", json.dumps(report_json, indent=4))

    except Exception as e:
        return f"Error: {str(e)}"


# GUI Functions


def scan_url():
    """Perform URL scan and display results."""
    url = url_entry.get().strip()
    if url:
        result = check_url_for_malware(url)
        messagebox.showinfo("URL Scan Result", result)
    else:
        messagebox.showerror("Error", "Please enter a valid URL.")


def check_hash():
    """Check if entered hash is detected as malware."""
    hash_value = hash_entry.get().strip()
    if hash_value:
        result = check_hash_for_malware(hash_value)
        messagebox.showinfo("Hash Check Result", result)
    else:
        messagebox.showerror("Error", "Please enter a hash value.")


def browse_file():
    """Open a file dialog to select a file for scanning."""
    file_path = filedialog.askopenfilename()
    if file_path:
        result = scan_file_for_malware(file_path)
        messagebox.showinfo("File Scan Result", result)
    else:
        messagebox.showerror("Error", "No file selected.")


# Create GUI
root = tk.Tk()
root.title("Malware Detection Script")

# URL Scan Section
url_label = tk.Label(root, text="Enter URL to scan:")
url_label.pack(pady=10)

url_entry = tk.Entry(root, width=50)
url_entry.pack(pady=5)

url_button = tk.Button(root, text="Scan URL", command=scan_url)
url_button.pack(pady=5)

# Hash Check Section
hash_label = tk.Label(root, text="Enter MD5 hash to check:")
hash_label.pack(pady=10)

hash_entry = tk.Entry(root, width=50)
hash_entry.pack(pady=5)

hash_button = tk.Button(root, text="Check Hash", command=check_hash)
hash_button.pack(pady=5)

# File Upload Section
file_label = tk.Label(root, text="Upload a file for scanning:")
file_label.pack(pady=10)

file_button = tk.Button(root, text="Browse File", command=browse_file)
file_button.pack(pady=5)

# Run GUI
root.mainloop()
